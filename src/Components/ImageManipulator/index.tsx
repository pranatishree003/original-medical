import Konva from 'konva';
import React, { useRef, useState } from 'react';
import ReactCrop, { Crop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import { Stage, Layer, Image as KonvaImage } from 'react-konva';
import useImage from 'use-image';

const ImageManipulator = () => {
  const [imageURL, setImageURL] = useState<string | null>(null);

  const [crop, setCrop] = useState<Crop>({
    unit: '%',
    width: 50,
    height: 50,
    x: 0,
    y: 0,
  });
  const [completedCrop, setCompletedCrop] = useState<Crop | null>(null);
  const [croppedImageURL, setCroppedImageURL] = useState<string | null>(null);
  const [brightness, setBrightness] = useState(0); // Brightness (-1 to 1)
  const [contrast, setContrast] = useState(0); // Contrast (-1 to 1)
  const [windowLevel, setWindowLevel] = useState(128); // Center for window/level
  const [windowWidth, setWindowWidth] = useState(256); // Width for window/level

  // Generated by Copilot
  const konvaImageRef = useRef<Konva.Image>(null);
  const imageRef = useRef<HTMLImageElement | null>(null);
  const [image] = useImage(croppedImageURL || imageURL || '');

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      const reader = new FileReader();
      reader.onload = (e) => setImageURL(e.target?.result as string);
      reader.readAsDataURL(event.target.files[0]);
    }
  };

  const cropImage = () => {
    if (!completedCrop || !imageRef.current) return;

    const canvas = document.createElement('canvas');
    const scaleX = imageRef.current.naturalWidth / imageRef.current.width;
    const scaleY = imageRef.current.naturalHeight / imageRef.current.height;

    canvas.width = completedCrop.width!;
    canvas.height = completedCrop.height!;
    const ctx = canvas.getContext('2d');

    if (ctx) {
      ctx.drawImage(
        imageRef.current,
        completedCrop.x! * scaleX,
        completedCrop.y! * scaleY,
        completedCrop.width! * scaleX,
        completedCrop.height! * scaleY,
        0,
        0,
        completedCrop.width!,
        completedCrop.height!
      );

      const croppedURL = canvas.toDataURL('image/png');
      setCroppedImageURL(croppedURL);
    }
  };

  const applyFilters = () => {
    if (konvaImageRef.current) {
      konvaImageRef.current.cache();
      konvaImageRef.current.filters([
        Konva.Filters.Brighten,
        Konva.Filters.Contrast,
        windowLevelFilter,
      ]);
      konvaImageRef.current.brightness(brightness);
      konvaImageRef.current.contrast(contrast);
      konvaImageRef.current.levels(windowLevel);
      konvaImageRef.current.width(windowWidth);
      konvaImageRef.current.getLayer()?.batchDraw();
    }
  };

  const windowLevelFilter = (imageData: ImageData) => {
    const data = imageData.data;
    const min = windowLevel - windowWidth / 2;
    const max = windowLevel + windowWidth / 2;

    for (let i = 0; i < data.length; i += 4) {
      for (let j = 0; j < 3; j++) {
        const value = data[i + j];
        if (value < min) {
          data[i + j] = 0;
        } else if (value > max) {
          data[i + j] = 255;
        } else {
          data[i + j] = ((value - min) / (max - min)) * 255;
        }
      }
    }
  };

  return (
    <div className='p-4'>
      <input
        type='file'
        accept='image/*'
        onChange={handleFileChange}
        className='text-sm text-gray-500
            file:mr-4 file:py-2 file:px-4
            file:rounded-md file:border-0
            file:text-sm file:font-semibold
            file:bg-blue-50 file:text-blue-700
            hover:file:bg-blue-100'
      />

      {imageURL && !croppedImageURL && (
        <div className='my-4'>
          <ReactCrop
            crop={crop}
            onChange={(newCrop) => setCrop(newCrop)}
            onComplete={(c) => setCompletedCrop(c)}
          >
            <img ref={imageRef} src={imageURL} alt='Selected' />
          </ReactCrop>
          <button
            onClick={cropImage}
            className='mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600'
          >
            Crop Image
          </button>
        </div>
      )}

      {croppedImageURL && (
        <div className='my-4'>
          <Stage width={500} height={400}>
            <Layer>
              <KonvaImage ref={konvaImageRef} image={image} />
            </Layer>
          </Stage>

          <div className='my-4 flex flex-col gap-4'>
            <label>
              Brightness
              <input
                type='range'
                min='-1'
                max='1'
                step='0.1'
                value={brightness}
                onChange={(e) => setBrightness(parseFloat(e.target.value))}
                // We could use debounce  here to update the image on every change
                // since we are updating the image on button click only, for simplicity, I am not using it.
              />
            </label>
            <label>
              Contrast
              <input
                type='range'
                min='-1'
                max='1'
                step='0.1'
                value={contrast}
                onChange={(e) => setContrast(parseFloat(e.target.value))}
                // Same as above we could use debounce here
              />
            </label>
            <label>
              Window Level
              <input
                type='range'
                min='0'
                max='255'
                value={windowLevel}
                onChange={(e) => setWindowLevel(parseInt(e.target.value))}
              />
            </label>
            <label>
              Window Width
              <input
                type='range'
                min='1'
                max='512'
                value={windowWidth}
                onChange={(e) => setWindowWidth(parseInt(e.target.value))}
              />
            </label>
          </div>

          <button
            onClick={applyFilters}
            className='px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600'
          >
            Apply Filters
          </button>
        </div>
      )}
    </div>
  );
};

export default ImageManipulator;
